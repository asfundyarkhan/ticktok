/**
 * Image helper utility functions for handling product images consistently
 */

/**
 * Gets the best available image URL from a product or listing
 * Handles all the different ways images might be stored
 *
 * @param item - Product or listing object with image fields
 * @returns The most appropriate image URL or null if no image is found
 */
export function getBestProductImage(
  item:
    | {
        mainImage?: string | null;
        image?: string | null;
        images?: string[] | null;
        productImage?: string | null;
      }
    | null
    | undefined
): string | null {
  if (!item) return null;

  // Check productImage first (specific to orders/pending page)
  if (item.productImage && item.productImage.trim() !== "") return item.productImage;
  
  // Check mainImage next
  if (item.mainImage && item.mainImage.trim() !== "") return item.mainImage;

  // Then check images array
  if (item.images?.length && item.images[0]?.trim() !== "")
    return item.images[0];

  // Then check legacy image field
  if (item.image && item.image.trim() !== "") return item.image;

  // Return null instead of empty string to avoid Next.js Image warnings
  return null;
}

/**
 * Normalize an array of image URLs, filtering out empty values
 *
 * @param images - Array of image URLs that might contain null/undefined values
 * @param mainImage - Optional main image to include if not in the array
 * @returns Clean array of image URLs
 */
export function normalizeProductImages(
  images?: (string | null | undefined)[] | null,
  mainImage?: string | null
): string[] {
  const result: string[] = [];

  // Add main image if provided and not empty
  if (mainImage) {
    result.push(mainImage);
  }

  // Add all non-empty images from the array
  if (images?.length) {
    images.forEach((img) => {
      if (img && !result.includes(img)) {
        result.push(img);
      }
    });
  }

  return result;
}

/**
 * Gets the best available image URL from a Firestore listing or product
 * Handles Firestore storage URLs specifically
 *
 * @param item - Product or listing object with image fields
 * @returns The most appropriate image URL configuration or null if no image is found
 */
export function getFirestoreImage(
  item:
    | {
        mainImage?: string | null;
        image?: string | null;
        images?: string[] | null;
        productImage?: string | null;
      }
    | null
    | undefined
): { src: string; unoptimized: boolean } | null {
  const imageUrl = getBestProductImage(item);

  // If no image found, return null to avoid Next.js warnings
  if (!imageUrl) {
    return null;
  }

  // Check if it's a Firestore storage URL
  const isFirestoreUrl =
    imageUrl.includes("firebasestorage.googleapis.com") ||
    imageUrl.includes("storage.googleapis.com");

  return {
    src: imageUrl,
    unoptimized: isFirestoreUrl, // Only unoptimize Firebase Storage URLs
  };
}

/**
 * Creates React elements for product images with proper fallback handling
 * This helps avoid the "empty src" warnings from Next.js
 * 
 * @param item - Product or listing object with image fields
 * @param width - Width of the image
 * @param height - Height of the image
 * @param altText - Alt text for the image
 * @returns React element for displaying the image with fallback
 */
export function ProductImage({
  item,
  width,
  height,
  altText,
  className,
  priority = false,
  onError,
  fallbackImage,
}: {
  item: {
    mainImage?: string | null;
    image?: string | null;
    images?: string[] | null;
    productImage?: string | null;
    name?: string;
  } | null | undefined;
  width: number;
  height: number;
  altText?: string;
  className?: string;
  priority?: boolean;
  onError?: (e: React.SyntheticEvent<HTMLImageElement, Event>) => void;
  fallbackImage?: string;
}): JSX.Element {
  // Import Image dynamically since this is a utility file
  const Image = require('next/image').default;
  
  const imageConfig = getFirestoreImage(item);
  
  if (imageConfig) {
    return (
      <Image
        src={imageConfig.src}
        alt={altText || item?.name || 'Product image'}
        width={width}
        height={height}
        className={className || 'object-cover'}
        unoptimized={imageConfig.unoptimized}
        priority={priority}
        onError={(e) => {
          console.log("Image failed to load:", e.currentTarget.src);
          if (fallbackImage) {
            e.currentTarget.src = fallbackImage;
          }
          if (onError) onError(e);
        }}
      />
    );
  } else {
    return (
      <div className="w-full h-full flex items-center justify-center">
        <span className="text-xs text-gray-400">No image</span>
      </div>
    );
  }
}
